name: ci

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  unit-tests:
    name: Unit Tests
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23
      - name: Go fmt
        run: |
          ! go fmt ./... | read
      - name: Go vet
        run: |
          ! go vet ./... | read
      - name: Go Test
        run: SKIP_INTEGRATION_TESTS=1 go test -v ./...

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform_version: ["12", "13", "14", "15", "latest"]

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23
        id: go
      - name: Get dependencies
        run: |
          go mod tidy
      - name: Install tfenv
        run: |
          git clone https://github.com/tfutils/tfenv.git $GITHUB_WORKSPACE/.tfenv
          echo "$GITHUB_WORKSPACE/.tfenv/bin" >> $GITHUB_PATH
      - name: Install terraform
        working-directory: test/tfenvconf/terraform_${{ matrix.terraform_version }}
        run: |
          tfenv install
          tfenv use
      - name: Print Terraform version
        run: |
          terraform --version
      - name: Set Test-Suite
        id: test-suite
        env:
          TF_VERSION: ${{ matrix.terraform_version }}
        uses: actions/github-script@v6
        with:
          script: |
            console.log(`Setting test suite version based on ${process.env.TF_VERSION}`)
            const suite = process.env.TF_VERSION.replace('.', 'o')
            console.log(`Test suite set to ${suite}`)
            return suite
          result-encoding: string

      - name: Test
        run: |
          go test -v -run ^TestTerraform${{ steps.test-suite.outputs.result }}
